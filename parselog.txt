    lex.py: 925:lex: tokens   = ['white_space', 'comma', 'semicolon', 'obracket', 'cbracket', 'ocurly', 'ccurly', 'assign', 'plus', 'minus', 'star', 'div', 'printx', 'scanx', 'idx', 'string', 'complement', 'number', 'less', 'less_equal', 'equal', 'case_expr', 'arrobe', 'dot', 'doubledot', 'CLASS', 'LET', 'LOOP', 'INHERITS', 'POOL', 'IF', 'THEN', 'ELSE', 'FI', 'WHILE', 'CASE', 'OF', 'ESAC', 'NEW', 'NOT', 'TRUE', 'FALSE', 'ISVOID', 'IN']
    lex.py: 926:lex: literals = ''
    lex.py: 927:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 956:lex: Adding rule t_idx -> '[a-zA-Z_][a-zA-Z_0-9]*' (state 'INITIAL')
    lex.py: 956:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_string -> '\"([^\\\n]|(\\.))*?\"' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_white_space -> '[ \t\r\f\v\n]+' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_number -> '[0-9]+' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_printx -> 'print' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_scanx -> 'scan' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_obracket -> '\(' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_cbracket -> '\)' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_ocurly -> '\{' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_ccurly -> '\}' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_assign -> '<-' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_plus -> '\+' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_minus -> '\-' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_star -> '\*' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_less_equal -> '<=' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_case_expr -> '=>' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_dot -> '\.' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_comma -> ',' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_semicolon -> ';' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_div -> '/' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_complement -> '~' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_less -> '<' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_equal -> '=' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_arrobe -> '@' (state 'INITIAL')
    lex.py: 962:lex: Adding rule t_doubledot -> ':' (state 'INITIAL')
    lex.py: 969:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 978:lex: state 'INITIAL' : regex[0] = '(?P<t_idx>[a-zA-Z_][a-zA-Z_0-9]*)|(?P<t_newline>\n+)|(?P<t_string>\"([^\\\n]|(\\.))*?\")|(?P<t_white_space>[ \t\r\f\v\n]+)|(?P<t_number>[0-9]+)|(?P<t_printx>print)|(?P<t_scanx>scan)|(?P<t_obracket>\()|(?P<t_cbracket>\))|(?P<t_ocurly>\{)|(?P<t_ccurly>\})|(?P<t_assign><-)|(?P<t_plus>\+)|(?P<t_minus>\-)|(?P<t_star>\*)|(?P<t_less_equal><=)|(?P<t_case_expr>=>)|(?P<t_dot>\.)|(?P<t_comma>,)|(?P<t_semicolon>;)|(?P<t_div>/)|(?P<t_complement>~)|(?P<t_less><)|(?P<t_equal>=)|(?P<t_arrobe>@)|(?P<t_doubledot>:)'
