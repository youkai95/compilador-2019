
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightassignleftNOTnonassoclessless_equalequalleftplusminusleftstardivrightISVOIDrightcomplementleftdotwhite_space comma semicolon obracket cbracket ocurly ccurly assign plus minus star div printx scanx idx string complement number less less_equal equal case_expr arrobe dot doubledot CLASS LET LOOP INHERITS POOL IF THEN ELSE FI WHILE CASE OF ESAC NEW NOT TRUE FALSE ISVOID INempty :binary_operator : v_expr plus v_expr\n                    | v_expr minus v_expr\n                | v_expr star v_expr\n            | v_expr div v_exprprogram : class_expresion semicolon program_aprogram_a : class_expresion semicolon program_a\n\t\t    | emptyneg : NOT idxcompl : complement idxassign_expresion : idx assign exprdeclare_expresion : idx doubledot idx assign expr\n    \t\t\t\t| idx doubledot idxdeclare_method : idx doubledot idxnew_expresion : NEW idxclass_expresion : CLASS idx ocurly feature\n\t\t  | CLASS idx INHERITS idx ocurly featurefeature : method_decl feature\n                | property_decl feature\n\t\t\t\t| ccurlymethod_decl : idx obracket formal cbracket doubledot idx ocurly expr ccurly semicolon formal : declare_method formal_a\n                | empty formal_a : comma declare_method formal_a\n                | emptyexpr : assign_expresion\n            | while_expresion\n            | v_exprcomparison_expresion : v_expr less v_expr\n                            | v_expr less_equal v_expr\n                            | v_expr equal v_exprv_expr : conditional_expresion\n            | let_expresion\n            | case_expresion\n            | dispatch_expresion\n            | dispatch_instance\n            | block_expresion\n            | binary_operator\n            | neg\n            | compl\n            | is_void\n            | new_expresion\n            | term\n            | comparison_expresionterm : var\n            | num\n            | str\n            | bool\n            | obracket v_expr cbracketvar : idxnum : numberstr : stringbool : TRUE\n            | FALSEblock_expresion : ocurly block_expr ccurlyblock_expr : expr semicolon block_expr_ablock_expr_a : expr semicolon block_expr_a\n                    | emptyproperty_decl : declare_expresion semicolonconditional_expresion : IF v_expr THEN expr ELSE expr FIis_void : ISVOID exprwhile_expresion : WHILE v_expr LOOP expr POOLcase_expresion : CASE expr OF case_list ESACcase_list : declare_method case_expr expr semicolon case_list_acase_list_a : declare_method case_expr expr semicolon case_list_a\n                | emptylet_expresion : LET let_declr_list IN exprlet_declr_list : declare_expresion let_declr_list_alet_declr_list_a : declare_expresion let_declr_list_a\n                        | emptydispatch_expresion : idx obracket dispatch_p_list cbracket dispatch_instance : v_expr dot idx obracket dispatch_p_list cbracket\n                        | v_expr arrobe idx dot idx obracket dispatch_p_list cbracket dispatch_p_list : v_expr dispatch_p_list_a\n                    | emptydispatch_p_list_a : comma v_expr dispatch_p_list_a\n                    | empty'
    
_lr_action_items = {'CLASS':([0,4,11,],[3,3,3,]),'$end':([1,4,7,8,11,19,],[0,-1,-6,-8,-1,-7,]),'semicolon':([2,6,13,16,17,22,23,30,31,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,91,99,100,101,102,103,105,111,112,113,114,115,116,117,125,126,129,137,141,144,148,150,155,158,161,163,168,],[4,11,-16,-20,24,-18,-19,-13,-17,-50,-12,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-50,127,-9,-10,-61,-15,-11,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,-67,152,153,-62,-63,-72,162,-60,-73,169,]),'idx':([3,9,10,14,15,20,21,24,25,30,32,35,37,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,84,85,86,87,88,89,91,94,100,101,102,103,104,105,111,112,113,114,115,116,117,118,119,120,121,124,125,126,127,129,131,133,134,137,148,149,150,151,152,153,155,156,161,162,163,167,169,],[5,12,18,12,12,26,30,-59,12,-13,38,26,41,77,-50,-12,-26,-27,-28,91,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,91,95,41,91,41,100,101,41,103,-45,-46,-47,-48,-51,-52,-53,-54,41,91,109,110,91,91,91,91,91,91,91,-50,95,-9,-10,-61,-15,41,-11,-2,-3,-4,-5,-29,-30,-31,41,41,41,95,26,-49,-55,41,-71,91,91,147,-67,-62,41,-63,41,41,-21,-72,91,-60,26,-73,41,26,]),'ocurly':([5,18,37,46,60,62,63,64,67,77,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[9,25,64,64,64,64,64,64,64,104,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'INHERITS':([5,],[10,]),'ccurly':([9,14,15,24,25,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,91,98,100,101,102,103,105,111,112,113,114,115,116,117,125,126,127,128,129,137,142,143,148,150,152,153,155,159,161,163,],[16,16,16,-59,16,-50,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-50,126,-9,-10,-61,-15,-11,-2,-3,-4,-5,-29,-30,-31,-49,-55,-1,144,-71,-67,-56,-58,-62,-63,-1,-21,-72,-57,-60,-73,]),'obracket':([12,37,41,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,91,104,109,118,119,120,127,131,133,147,149,151,152,156,167,],[20,63,80,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,80,63,133,63,63,63,63,63,63,156,63,63,63,63,63,]),'doubledot':([12,26,33,95,],[21,32,39,21,]),'cbracket':([20,27,28,29,34,36,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,78,80,91,97,100,101,102,103,105,106,107,108,111,112,113,114,115,116,117,125,126,129,130,132,133,137,145,146,148,150,154,155,156,160,161,163,],[-1,33,-1,-23,-22,-25,-14,-1,-50,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-24,-1,-50,125,-9,-10,-61,-15,-11,129,-1,-75,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,-74,-77,-1,-67,-1,155,-62,-63,-76,-72,-1,163,-60,-73,]),'comma':([28,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,91,100,101,102,103,105,107,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[35,-14,35,-50,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-50,-9,-10,-61,-15,-11,131,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,-67,131,-62,-63,-72,-60,-73,]),'assign':([30,41,],[37,79,]),'IN':([30,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,91,93,94,100,101,102,103,105,111,112,113,114,115,116,117,121,122,123,125,126,129,137,138,148,150,155,161,163,],[-13,-50,-12,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-50,120,-1,-9,-10,-61,-15,-11,-2,-3,-4,-5,-29,-30,-31,-1,-68,-70,-49,-55,-71,-67,-69,-62,-63,-72,-60,-73,]),'WHILE':([37,62,64,67,79,104,118,119,120,127,149,151,152,167,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'IF':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'LET':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'CASE':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'NOT':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'complement':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'ISVOID':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'NEW':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'number':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'string':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'TRUE':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'FALSE':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'case_expr':([38,140,164,],[-14,151,167,]),'dot':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,92,97,100,101,102,103,105,107,110,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[-50,-26,-27,81,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,81,-50,81,81,-9,-10,-61,-15,-11,81,134,81,81,81,81,81,81,81,-49,-55,-71,-67,81,-62,-63,-72,-60,-73,]),'arrobe':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,92,97,100,101,102,103,105,107,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[-50,-26,-27,82,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,82,-50,82,82,-9,-10,-61,-15,-11,82,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,-67,82,-62,-63,-72,-60,-73,]),'plus':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,92,97,100,101,102,103,105,107,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[-50,-26,-27,83,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,83,-50,83,83,-9,-10,-61,-15,-11,83,-2,-3,-4,-5,83,83,83,-49,-55,-71,-67,83,-62,-63,-72,-60,-73,]),'minus':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,92,97,100,101,102,103,105,107,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[-50,-26,-27,84,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,84,-50,84,84,-9,-10,-61,-15,-11,84,-2,-3,-4,-5,84,84,84,-49,-55,-71,-67,84,-62,-63,-72,-60,-73,]),'star':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,92,97,100,101,102,103,105,107,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[-50,-26,-27,85,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,85,-50,85,85,-9,-10,-61,-15,-11,85,85,85,-4,-5,85,85,85,-49,-55,-71,-67,85,-62,-63,-72,-60,-73,]),'div':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,92,97,100,101,102,103,105,107,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[-50,-26,-27,86,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,86,-50,86,86,-9,-10,-61,-15,-11,86,86,86,-4,-5,86,86,86,-49,-55,-71,-67,86,-62,-63,-72,-60,-73,]),'less':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,92,97,100,101,102,103,105,107,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[-50,-26,-27,87,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,87,-50,87,87,-9,-10,-61,-15,-11,87,-2,-3,-4,-5,None,None,None,-49,-55,-71,-67,87,-62,-63,-72,-60,-73,]),'less_equal':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,92,97,100,101,102,103,105,107,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[-50,-26,-27,88,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,88,-50,88,88,-9,-10,-61,-15,-11,88,-2,-3,-4,-5,None,None,None,-49,-55,-71,-67,88,-62,-63,-72,-60,-73,]),'equal':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,92,97,100,101,102,103,105,107,111,112,113,114,115,116,117,125,126,129,137,145,148,150,155,161,163,],[-50,-26,-27,89,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,89,-50,89,89,-9,-10,-61,-15,-11,89,-2,-3,-4,-5,None,None,None,-49,-55,-71,-67,89,-62,-63,-72,-60,-73,]),'OF':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,91,96,100,101,102,103,105,111,112,113,114,115,116,117,125,126,129,137,148,150,155,161,163,],[-50,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-50,124,-9,-10,-61,-15,-11,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,-67,-62,-63,-72,-60,-73,]),'LOOP':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,90,91,100,101,102,103,105,111,112,113,114,115,116,117,125,126,129,137,148,150,155,161,163,],[-50,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,118,-50,-9,-10,-61,-15,-11,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,-67,-62,-63,-72,-60,-73,]),'THEN':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,91,92,100,101,102,103,105,111,112,113,114,115,116,117,125,126,129,137,148,150,155,161,163,],[-50,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-50,119,-9,-10,-61,-15,-11,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,-67,-62,-63,-72,-60,-73,]),'POOL':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,91,100,101,102,103,105,111,112,113,114,115,116,117,125,126,129,135,137,148,150,155,161,163,],[-50,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-50,-9,-10,-61,-15,-11,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,148,-67,-62,-63,-72,-60,-73,]),'ELSE':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,91,100,101,102,103,105,111,112,113,114,115,116,117,125,126,129,136,137,148,150,155,161,163,],[-50,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-50,-9,-10,-61,-15,-11,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,149,-67,-62,-63,-72,-60,-73,]),'FI':([41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,69,70,71,72,73,74,75,76,91,100,101,102,103,105,111,112,113,114,115,116,117,125,126,129,137,148,150,155,157,161,163,],[-50,-26,-27,-28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-51,-52,-53,-54,-50,-9,-10,-61,-15,-11,-2,-3,-4,-5,-29,-30,-31,-49,-55,-71,-67,-62,-63,-72,161,-60,-73,]),'ESAC':([139,162,165,166,169,170,],[150,-1,-64,-66,-1,-65,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_expresion':([0,4,11,],[2,6,6,]),'program_a':([4,11,],[7,19,]),'empty':([4,11,20,28,40,80,94,107,121,127,133,145,152,156,162,169,],[8,8,29,36,36,108,123,132,123,143,108,132,143,108,166,166,]),'feature':([9,14,15,25,],[13,22,23,31,]),'method_decl':([9,14,15,25,],[14,14,14,14,]),'property_decl':([9,14,15,25,],[15,15,15,15,]),'declare_expresion':([9,14,15,25,61,94,121,],[17,17,17,17,94,121,121,]),'formal':([20,],[27,]),'declare_method':([20,35,124,162,169,],[28,40,140,164,164,]),'formal_a':([28,40,],[34,78,]),'expr':([37,62,64,67,79,104,118,119,120,127,149,151,152,167,],[42,96,99,102,105,128,135,136,137,141,157,158,141,168,]),'assign_expresion':([37,62,64,67,79,104,118,119,120,127,149,151,152,167,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'while_expresion':([37,62,64,67,79,104,118,119,120,127,149,151,152,167,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'v_expr':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[45,90,92,45,97,45,45,45,107,111,112,113,114,115,116,117,45,45,45,45,45,145,107,45,45,45,107,45,]),'conditional_expresion':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'let_expresion':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'case_expresion':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'dispatch_expresion':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'dispatch_instance':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'block_expresion':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'binary_operator':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'neg':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'compl':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'is_void':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'new_expresion':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'term':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'comparison_expresion':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'var':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'num':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'str':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'bool':([37,46,60,62,63,64,67,79,80,83,84,85,86,87,88,89,104,118,119,120,127,131,133,149,151,152,156,167,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'let_declr_list':([61,],[93,]),'block_expr':([64,],[98,]),'dispatch_p_list':([80,133,156,],[106,146,160,]),'let_declr_list_a':([94,121,],[122,138,]),'dispatch_p_list_a':([107,145,],[130,154,]),'case_list':([124,],[139,]),'block_expr_a':([127,152,],[142,159,]),'case_list_a':([162,169,],[165,170,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','main.py',91),
  ('binary_operator -> v_expr plus v_expr','binary_operator',3,'p_binary_operator','main.py',96),
  ('binary_operator -> v_expr minus v_expr','binary_operator',3,'p_binary_operator','main.py',97),
  ('binary_operator -> v_expr star v_expr','binary_operator',3,'p_binary_operator','main.py',98),
  ('binary_operator -> v_expr div v_expr','binary_operator',3,'p_binary_operator','main.py',99),
  ('program -> class_expresion semicolon program_a','program',3,'p_program','main.py',111),
  ('program_a -> class_expresion semicolon program_a','program_a',3,'p_program_a','main.py',116),
  ('program_a -> empty','program_a',1,'p_program_a','main.py',117),
  ('neg -> NOT idx','neg',2,'p_neg','main.py',125),
  ('compl -> complement idx','compl',2,'p_compl','main.py',130),
  ('assign_expresion -> idx assign expr','assign_expresion',3,'p_assign_expresion','main.py',135),
  ('declare_expresion -> idx doubledot idx assign expr','declare_expresion',5,'p_declare_expresion','main.py',140),
  ('declare_expresion -> idx doubledot idx','declare_expresion',3,'p_declare_expresion','main.py',141),
  ('declare_method -> idx doubledot idx','declare_method',3,'p_declare_method','main.py',149),
  ('new_expresion -> NEW idx','new_expresion',2,'p_new_expresion','main.py',154),
  ('class_expresion -> CLASS idx ocurly feature','class_expresion',4,'p_class_expresion','main.py',159),
  ('class_expresion -> CLASS idx INHERITS idx ocurly feature','class_expresion',6,'p_class_expresion','main.py',160),
  ('feature -> method_decl feature','feature',2,'p_feature','main.py',168),
  ('feature -> property_decl feature','feature',2,'p_feature','main.py',169),
  ('feature -> ccurly','feature',1,'p_feature','main.py',170),
  ('method_decl -> idx obracket formal cbracket doubledot idx ocurly expr ccurly semicolon','method_decl',10,'p_method_decl','main.py',177),
  ('formal -> declare_method formal_a','formal',2,'p_formal','main.py',182),
  ('formal -> empty','formal',1,'p_formal','main.py',183),
  ('formal_a -> comma declare_method formal_a','formal_a',3,'p_formal_a','main.py',191),
  ('formal_a -> empty','formal_a',1,'p_formal_a','main.py',192),
  ('expr -> assign_expresion','expr',1,'p_expr','main.py',199),
  ('expr -> while_expresion','expr',1,'p_expr','main.py',200),
  ('expr -> v_expr','expr',1,'p_expr','main.py',201),
  ('comparison_expresion -> v_expr less v_expr','comparison_expresion',3,'p_comparison_expresion','main.py',206),
  ('comparison_expresion -> v_expr less_equal v_expr','comparison_expresion',3,'p_comparison_expresion','main.py',207),
  ('comparison_expresion -> v_expr equal v_expr','comparison_expresion',3,'p_comparison_expresion','main.py',208),
  ('v_expr -> conditional_expresion','v_expr',1,'p_v_expr','main.py',218),
  ('v_expr -> let_expresion','v_expr',1,'p_v_expr','main.py',219),
  ('v_expr -> case_expresion','v_expr',1,'p_v_expr','main.py',220),
  ('v_expr -> dispatch_expresion','v_expr',1,'p_v_expr','main.py',221),
  ('v_expr -> dispatch_instance','v_expr',1,'p_v_expr','main.py',222),
  ('v_expr -> block_expresion','v_expr',1,'p_v_expr','main.py',223),
  ('v_expr -> binary_operator','v_expr',1,'p_v_expr','main.py',224),
  ('v_expr -> neg','v_expr',1,'p_v_expr','main.py',225),
  ('v_expr -> compl','v_expr',1,'p_v_expr','main.py',226),
  ('v_expr -> is_void','v_expr',1,'p_v_expr','main.py',227),
  ('v_expr -> new_expresion','v_expr',1,'p_v_expr','main.py',228),
  ('v_expr -> term','v_expr',1,'p_v_expr','main.py',229),
  ('v_expr -> comparison_expresion','v_expr',1,'p_v_expr','main.py',230),
  ('term -> var','term',1,'p_term','main.py',235),
  ('term -> num','term',1,'p_term','main.py',236),
  ('term -> str','term',1,'p_term','main.py',237),
  ('term -> bool','term',1,'p_term','main.py',238),
  ('term -> obracket v_expr cbracket','term',3,'p_term','main.py',239),
  ('var -> idx','var',1,'p_var','main.py',247),
  ('num -> number','num',1,'p_num','main.py',252),
  ('str -> string','str',1,'p_str','main.py',257),
  ('bool -> TRUE','bool',1,'p_bool','main.py',262),
  ('bool -> FALSE','bool',1,'p_bool','main.py',263),
  ('block_expresion -> ocurly block_expr ccurly','block_expresion',3,'p_block_expresion','main.py',268),
  ('block_expr -> expr semicolon block_expr_a','block_expr',3,'p_block_expr','main.py',273),
  ('block_expr_a -> expr semicolon block_expr_a','block_expr_a',3,'p_block_expr_a','main.py',278),
  ('block_expr_a -> empty','block_expr_a',1,'p_block_expr_a','main.py',279),
  ('property_decl -> declare_expresion semicolon','property_decl',2,'p_property_decl','main.py',287),
  ('conditional_expresion -> IF v_expr THEN expr ELSE expr FI','conditional_expresion',7,'p_conditional_expresion','main.py',292),
  ('is_void -> ISVOID expr','is_void',2,'p_is_void','main.py',297),
  ('while_expresion -> WHILE v_expr LOOP expr POOL','while_expresion',5,'p_while_expresion','main.py',302),
  ('case_expresion -> CASE expr OF case_list ESAC','case_expresion',5,'p_case_expresion','main.py',307),
  ('case_list -> declare_method case_expr expr semicolon case_list_a','case_list',5,'p_case_list','main.py',312),
  ('case_list_a -> declare_method case_expr expr semicolon case_list_a','case_list_a',5,'p_case_list_a','main.py',317),
  ('case_list_a -> empty','case_list_a',1,'p_case_list_a','main.py',318),
  ('let_expresion -> LET let_declr_list IN expr','let_expresion',4,'p_let_expresion','main.py',326),
  ('let_declr_list -> declare_expresion let_declr_list_a','let_declr_list',2,'p_let_declr_list','main.py',331),
  ('let_declr_list_a -> declare_expresion let_declr_list_a','let_declr_list_a',2,'p_let_declr_list_a','main.py',336),
  ('let_declr_list_a -> empty','let_declr_list_a',1,'p_let_declr_list_a','main.py',337),
  ('dispatch_expresion -> idx obracket dispatch_p_list cbracket','dispatch_expresion',4,'p_dispatch_expresion','main.py',345),
  ('dispatch_instance -> v_expr dot idx obracket dispatch_p_list cbracket','dispatch_instance',6,'p_dispatch_instance','main.py',350),
  ('dispatch_instance -> v_expr arrobe idx dot idx obracket dispatch_p_list cbracket','dispatch_instance',8,'p_dispatch_instance','main.py',351),
  ('dispatch_p_list -> v_expr dispatch_p_list_a','dispatch_p_list',2,'p_dispatch_p_list','main.py',359),
  ('dispatch_p_list -> empty','dispatch_p_list',1,'p_dispatch_p_list','main.py',360),
  ('dispatch_p_list_a -> comma v_expr dispatch_p_list_a','dispatch_p_list_a',3,'p_dispatch_p_list_a','main.py',367),
  ('dispatch_p_list_a -> empty','dispatch_p_list_a',1,'p_dispatch_p_list_a','main.py',368),
]
